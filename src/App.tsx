import React, { useState, useCallback } from 'react';
import { Copy, Sparkles, Globe2, Mail, Github, Linkedin, Twitter } from 'lucide-react';

// Language scripts and their transformations
const scripts = {
  latin: {
    name: 'Latin',
    transformations: {
      bold: (text: string) => text.split('').map(char => {
        const code = char.charCodeAt(0);
        return code >= 65 && code <= 90 ? String.fromCharCode(code + 119809) :
               code >= 97 && code <= 122 ? String.fromCharCode(code + 119743) : char;
      }).join(''),
      italic: (text: string) => text.split('').map(char => {
        const code = char.charCodeAt(0);
        return code >= 65 && code <= 90 ? String.fromCharCode(code + 119847) :
               code >= 97 && code <= 122 ? String.fromCharCode(code + 119841) : char;
      }).join(''),
      cursive: (text: string) => text.split('').map(char => {
        const code = char.charCodeAt(0);
        return code >= 65 && code <= 90 ? String.fromCharCode(code + 119951) :
               code >= 97 && code <= 122 ? String.fromCharCode(code + 119945) : char;
      }).join(''),
      fancy: (text: string) => text.split('').map(char => {
        const code = char.charCodeAt(0);
        return code >= 65 && code <= 90 ? String.fromCharCode(code + 120159) :
               code >= 97 && code <= 122 ? String.fromCharCode(code + 120153) : char;
      }).join(''),
      fraktur: (text: string) => text.split('').map(char => {
        const fraktur: { [key: string]: string } = {
          'A': 'ùîÑ', 'B': 'ùîÖ', 'C': '‚Ñ≠', 'D': 'ùîá', 'E': 'ùîà', 'F': 'ùîâ', 'G': 'ùîä', 'H': '‚Ñå',
          'I': '‚Ñë', 'J': 'ùîç', 'K': 'ùîé', 'L': 'ùîè', 'M': 'ùîê', 'N': 'ùîë', 'O': 'ùîí', 'P': 'ùîì',
          'Q': 'ùîî', 'R': '‚Ñú', 'S': 'ùîñ', 'T': 'ùîó', 'U': 'ùîò', 'V': 'ùîô', 'W': 'ùîö', 'X': 'ùîõ',
          'Y': 'ùîú', 'Z': '‚Ñ®', 'a': 'ùîû', 'b': 'ùîü', 'c': 'ùî†', 'd': 'ùî°', 'e': 'ùî¢', 'f': 'ùî£',
          'g': 'ùî§', 'h': 'ùî•', 'i': 'ùî¶', 'j': 'ùîß', 'k': 'ùî®', 'l': 'ùî©', 'm': 'ùî™', 'n': 'ùî´',
          'o': 'ùî¨', 'p': 'ùî≠', 'q': 'ùîÆ', 'r': 'ùîØ', 's': 'ùî∞', 't': 'ùî±', 'u': 'ùî≤', 'v': 'ùî≥',
          'w': 'ùî¥', 'x': 'ùîµ', 'y': 'ùî∂', 'z': 'ùî∑'
        };
        return fraktur[char] || char;
      }).join(''),
      doubleStruck: (text: string) => text.split('').map(char => {
        const doubles: { [key: string]: string } = {
          'A': 'ùî∏', 'B': 'ùîπ', 'C': '‚ÑÇ', 'D': 'ùîª', 'E': 'ùîº', 'F': 'ùîΩ', 'G': 'ùîæ', 'H': '‚Ñç',
          'I': 'ùïÄ', 'J': 'ùïÅ', 'K': 'ùïÇ', 'L': 'ùïÉ', 'M': 'ùïÑ', 'N': '‚Ñï', 'O': 'ùïÜ', 'P': '‚Ñô',
          'Q': '‚Ñö', 'R': '‚Ñù', 'S': 'ùïä', 'T': 'ùïã', 'U': 'ùïå', 'V': 'ùïç', 'W': 'ùïé', 'X': 'ùïè',
          'Y': 'ùïê', 'Z': '‚Ñ§', 'a': 'ùïí', 'b': 'ùïì', 'c': 'ùïî', 'd': 'ùïï', 'e': 'ùïñ', 'f': 'ùïó',
          'g': 'ùïò', 'h': 'ùïô', 'i': 'ùïö', 'j': 'ùïõ', 'k': 'ùïú', 'l': 'ùïù', 'm': 'ùïû', 'n': 'ùïü',
          'o': 'ùï†', 'p': 'ùï°', 'q': 'ùï¢', 'r': 'ùï£', 's': 'ùï§', 't': 'ùï•', 'u': 'ùï¶', 'v': 'ùïß',
          'w': 'ùï®', 'x': 'ùï©', 'y': 'ùï™', 'z': 'ùï´'
        };
        return doubles[char] || char;
      }).join(''),
      circled: (text: string) => text.split('').map(char => {
        const circled: { [key: string]: string } = {
          'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ', 'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ',
          'I': '‚íæ', 'J': '‚íø', 'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ', 'O': '‚ìÑ', 'P': '‚ìÖ',
          'Q': '‚ìÜ', 'R': '‚ìá', 'S': '‚ìà', 'T': '‚ìâ', 'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç',
          'Y': '‚ìé', 'Z': '‚ìè', 'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï',
          'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò', 'j': '‚ìô', 'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù',
          'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°', 's': '‚ì¢', 't': '‚ì£', 'u': '‚ì§', 'v': '‚ì•',
          'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©'
        };
        return circled[char] || char;
      }).join('')
    }
  },
  cyrillic: {
    name: 'Cyrillic',
    transformations: {
      normal: (text: string) => {
        const cyrillic: { [key: string]: string } = {
          'a': '–∞', 'b': '–±', 'v': '–≤', 'g': '–≥', 'd': '–¥', 'e': '–µ', 'yo': '—ë',
          'zh': '–∂', 'z': '–∑', 'i': '–∏', 'j': '–π', 'k': '–∫', 'l': '–ª', 'm': '–º',
          'n': '–Ω', 'o': '–æ', 'p': '–ø', 'r': '—Ä', 's': '—Å', 't': '—Ç', 'u': '—É',
          'f': '—Ñ', 'h': '—Ö', 'ts': '—Ü', 'ch': '—á', 'sh': '—à', 'sch': '—â', 'y': '—ã',
          'e': '—ç', 'yu': '—é', 'ya': '—è'
        };
        return text.toLowerCase().split('').map(char => cyrillic[char] || char).join('');
      },
      fancy: (text: string) => {
        const fancyCyrillic: { [key: string]: string } = {
          '–∞': 'Œ±', '–±': '–≤', '–≤': ' ô', '–≥': '–≥', '–¥': '‚àÇ', '–µ': '—î', '—ë': '—ë',
          '–∂': '–∂', '–∑': '–∑', '–∏': '–∏', '–π': '–π', '–∫': '–∫', '–ª': '–ª', '–º': '–º',
          '–Ω': '–Ω', '–æ': 'œÉ', '–ø': '–ø', '—Ä': '—è', '—Å': '—Å', '—Ç': '—Ç', '—É': '—É',
          '—Ñ': '—Ñ', '—Ö': '—Ö', '—Ü': '—Ü', '—á': '—á', '—à': '—à', '—â': '—â', '—ã': '—ã',
          '—ç': '—ç', '—é': '—é', '—è': '—è'
        };
        return text.split('').map(char => fancyCyrillic[char.toLowerCase()] || char).join('');
      }
    }
  },
  greek: {
    name: 'Greek',
    transformations: {
      normal: (text: string) => {
        const greek: { [key: string]: string } = {
          'a': 'Œ±', 'b': 'Œ≤', 'g': 'Œ≥', 'd': 'Œ¥', 'e': 'Œµ', 'z': 'Œ∂', 'h': 'Œ∑',
          'th': 'Œ∏', 'i': 'Œπ', 'k': 'Œ∫', 'l': 'Œª', 'm': 'Œº', 'n': 'ŒΩ', 'x': 'Œæ',
          'o': 'Œø', 'p': 'œÄ', 'r': 'œÅ', 's': 'œÉ', 't': 'œÑ', 'u': 'œÖ', 'ph': 'œÜ',
          'ch': 'œá', 'ps': 'œà', 'w': 'œâ'
        };
        return text.toLowerCase().split('').map(char => greek[char] || char).join('');
      },
      fancy: (text: string) => {
        const fancyGreek: { [key: string]: string } = {
          'Œ±': 'Œ¨', 'Œ≤': 'œê', 'Œ≥': 'œí', 'Œ¥': 'Œî', 'Œµ': 'Œ≠', 'Œ∂': 'Œ∂', 'Œ∑': 'ŒÆ',
          'Œ∏': 'œë', 'Œπ': 'ŒØ', 'Œ∫': 'œ∞', 'Œª': 'Œõ', 'Œº': 'œª', 'ŒΩ': 'ŒΩ', 'Œæ': 'Œæ',
          'Œø': 'œå', 'œÄ': 'Œ†', 'œÅ': 'œ±', 'œÉ': 'œÇ', 'œÑ': 'œÑ', 'œÖ': 'œç', 'œÜ': 'œï',
          'œá': 'œá', 'œà': 'œà', 'œâ': 'œé'
        };
        return text.split('').map(char => fancyGreek[char.toLowerCase()] || char).join('');
      }
    }
  },
  japanese: {
    name: 'Japanese',
    transformations: {
      hiragana: (text: string) => {
        const hiragana: { [key: string]: string } = {
          'a': '„ÅÇ', 'i': '„ÅÑ', 'u': '„ÅÜ', 'e': '„Åà', 'o': '„Åä',
          'ka': '„Åã', 'ki': '„Åç', 'ku': '„Åè', 'ke': '„Åë', 'ko': '„Åì',
          'sa': '„Åï', 'shi': '„Åó', 'su': '„Åô', 'se': '„Åõ', 'so': '„Åù',
          'ta': '„Åü', 'chi': '„Å°', 'tsu': '„Å§', 'te': '„Å¶', 'to': '„Å®',
          'na': '„Å™', 'ni': '„Å´', 'nu': '„Å¨', 'ne': '„Å≠', 'no': '„ÅÆ',
          'ha': '„ÅØ', 'hi': '„Å≤', 'fu': '„Åµ', 'he': '„Å∏', 'ho': '„Åª',
          'ma': '„Åæ', 'mi': '„Åø', 'mu': '„ÇÄ', 'me': '„ÇÅ', 'mo': '„ÇÇ',
          'ya': '„ÇÑ', 'yu': '„ÇÜ', 'yo': '„Çà',
          'ra': '„Çâ', 'ri': '„Çä', 'ru': '„Çã', 're': '„Çå', 'ro': '„Çç',
          'wa': '„Çè', 'wo': '„Çí', 'n': '„Çì'
        };
        return text.toLowerCase().split('').map(char => hiragana[char] || char).join('');
      },
      katakana: (text: string) => {
        const katakana: { [key: string]: string } = {
          'a': '„Ç¢', 'i': '„Ç§', 'u': '„Ç¶', 'e': '„Ç®', 'o': '„Ç™',
          'ka': '„Ç´', 'ki': '„Ç≠', 'ku': '„ÇØ', 'ke': '„Ç±', 'ko': '„Ç≥',
          'sa': '„Çµ', 'shi': '„Ç∑', 'su': '„Çπ', 'se': '„Çª', 'so': '„ÇΩ',
          'ta': '„Çø', 'chi': '„ÉÅ', 'tsu': '„ÉÑ', 'te': '„ÉÜ', 'to': '„Éà',
          'na': '„Éä', 'ni': '„Éã', 'nu': '„Éå', 'ne': '„Éç', 'no': '„Éé',
          'ha': '„Éè', 'hi': '„Éí', 'fu': '„Éï', 'he': '„Éò', 'ho': '„Éõ',
          'ma': '„Éû', 'mi': '„Éü', 'mu': '„É†', 'me': '„É°', 'mo': '„É¢',
          'ya': '„É§', 'yu': '„É¶', 'yo': '„É®',
          'ra': '„É©', 'ri': '„É™', 'ru': '„É´', 're': '„É¨', 'ro': '„É≠',
          'wa': '„ÉØ', 'wo': '„É≤', 'n': '„É≥'
        };
        return text.toLowerCase().split('').map(char => katakana[char] || char).join('');
      }
    }
  },
  arabic: {
    name: 'Arabic',
    transformations: {
      normal: (text: string) => {
        const arabic: { [key: string]: string } = {
          'a': 'ÿß', 'b': 'ÿ®', 't': 'ÿ™', 'th': 'ÿ´', 'j': 'ÿ¨', 'h': 'ÿ≠',
          'kh': 'ÿÆ', 'd': 'ÿØ', 'dh': 'ÿ∞', 'r': 'ÿ±', 'z': 'ÿ≤', 's': 'ÿ≥',
          'sh': 'ÿ¥', 'S': 'ÿµ', 'D': 'ÿ∂', 'T': 'ÿ∑', 'Z': 'ÿ∏', '3': 'ÿπ',
          'gh': 'ÿ∫', 'f': 'ŸÅ', 'q': 'ŸÇ', 'k': 'ŸÉ', 'l': 'ŸÑ', 'm': 'ŸÖ',
          'n': 'ŸÜ', 'h': 'Ÿá', 'w': 'Ÿà', 'y': 'Ÿä'
        };
        return text.toLowerCase().split('').map(char => arabic[char] || char).join('');
      },
      decorative: (text: string) => {
        const decorativeArabic: { [key: string]: string } = {
          'ÿß': 'Ô∫ç', 'ÿ®': 'Ô∫è', 'ÿ™': 'Ô∫ï', 'ÿ´': 'Ô∫ô', 'ÿ¨': 'Ô∫ù', 'ÿ≠': 'Ô∫°',
          'ÿÆ': 'Ô∫•', 'ÿØ': 'Ô∫©', 'ÿ∞': 'Ô∫´', 'ÿ±': 'Ô∫≠', 'ÿ≤': 'Ô∫Ø', 'ÿ≥': 'Ô∫±',
          'ÿ¥': 'Ô∫µ', 'ÿµ': 'Ô∫π', 'ÿ∂': 'Ô∫Ω', 'ÿ∑': 'ÔªÅ', 'ÿ∏': 'ÔªÖ', 'ÿπ': 'Ôªâ',
          'ÿ∫': 'Ôªç', 'ŸÅ': 'Ôªë', 'ŸÇ': 'Ôªï', 'ŸÉ': 'Ôªô', 'ŸÑ': 'Ôªù', 'ŸÖ': 'Ôª°',
          'ŸÜ': 'Ôª•', 'Ÿá': 'Ôª©', 'Ÿà': 'Ôª≠', 'Ÿä': 'Ôª±'
        };
        return text.split('').map(char => decorativeArabic[char] || char).join('');
      }
    }
  },
  sanskrit: {
    name: 'Sanskrit (Devanagari)',
    transformations: {
      devanagari: (text: string) => {
        const devanagari: { [key: string]: string } = {
          'a': '‡§Ö', 'aa': '‡§Ü', 'i': '‡§á', 'ii': '‡§à', 'u': '‡§â', 'uu': '‡§ä',
          'e': '‡§è', 'ai': '‡§ê', 'o': '‡§ì', 'au': '‡§î', 'k': '‡§ï', 'kh': '‡§ñ',
          'g': '‡§ó', 'gh': '‡§ò', 'ng': '‡§ô', 'ch': '‡§ö', 'chh': '‡§õ', 'j': '‡§ú',
          'jh': '‡§ù', 'ny': '‡§û', 't': '‡§ü', 'th': '‡§†', 'd': '‡§°', 'dh': '‡§¢',
          'n': '‡§®', 'p': '‡§™', 'ph': '‡§´', 'b': '‡§¨', 'bh': '‡§≠', 'm': '‡§Æ',
          'y': '‡§Ø', 'r': '‡§∞', 'l': '‡§≤', 'v': '‡§µ', 'sh': '‡§∂', 's': '‡§∏',
          'h': '‡§π'
        };
        return text.toLowerCase().split('').map(char => devanagari[char] || char).join('');
      }
    }
  },
  korean: {
    name: 'Korean (Hangul)',
    transformations: {
      hangul: (text: string) => {
        const hangul: { [key: string]: string } = {
          'a': '„Öè', 'ya': '„Öë', 'eo': '„Öì', 'yeo': '„Öï', 'o': '„Öó', 'yo': '„Öõ',
          'u': '„Öú', 'yu': '„Ö†', 'eu': '„Ö°', 'i': '„Ö£', 'g': '„Ñ±', 'n': '„Ñ¥',
          'd': '„Ñ∑', 'r': '„Ñπ', 'm': '„ÖÅ', 'b': '„ÖÇ', 's': '„ÖÖ', 'ng': '„Öá',
          'j': '„Öà', 'ch': '„Öä', 'k': '„Öã', 't': '„Öå', 'p': '„Öç', 'h': '„Öé'
        };
        return text.toLowerCase().split('').map(char => hangul[char] || char).join('');
      }
    }
  },
  english: {
    name: 'English',
    transformations: {
      normal: (text: string) => text,
      uppercase: (text: string) => text.toUpperCase(),
      lowercase: (text: string) => text.toLowerCase(),
      titlecase: (text: string) => text.replace(/\b\w/g, (char) => char.toUpperCase()),
      reverse: (text: string) => text.split('').reverse().join('')
    }
  },
  malayalam: {
    name: 'Malayalam',
    transformations: {
      normal: (text: string) => {
        const malayalam: { [key: string]: string } = {
          'a': '‡¥Ö', 'aa': '‡¥Ü', 'i': '‡¥á', 'ii': '‡¥à', 'u': '‡¥â', 'uu': '‡¥ä',
          'e': '‡¥é', 'ee': '‡¥è', 'ai': '‡¥ê', 'o': '‡¥í', 'oo': '‡¥ì', 'au': '‡¥î',
          'k': '‡¥ï', 'kh': '‡¥ñ', 'g': '‡¥ó', 'gh': '‡¥ò', 'ng': '‡¥ô',
          'c': '‡¥ö', 'ch': '‡¥õ', 'j': '‡¥ú', 'jh': '‡¥ù', 'ny': '‡¥û',
          't': '‡¥ü', 'th': '‡¥†', 'd': '‡¥°', 'dh': '‡¥¢', 'n': '‡¥£',
          'p': '‡¥™', 'ph': '‡¥´', 'b': '‡¥¨', 'bh': '‡¥≠', 'm': '‡¥Æ',
          'y': '‡¥Ø', 'r': '‡¥∞', 'l': '‡¥≤', 'v': '‡¥µ', 'sh': '‡¥∂', 's': '‡¥∏',
          'h': '‡¥π'
        };
        return text.toLowerCase().split('').map(char => malayalam[char] || char).join('');
      },
      fancy: (text: string) => {
        const fancyMalayalam: { [key: string]: string } = {
          '‡¥Ö': '‡¥Ü', '‡¥Ü': '‡¥á', '‡¥á': '‡¥à', '‡¥â': '‡¥ä', '‡¥é': '‡¥è', '‡¥è': '‡¥ê',
          '‡¥í': '‡¥ì', '‡¥ì': '‡¥î', '‡¥ï': '‡¥ñ', '‡¥ñ': '‡¥ó', '‡¥ó': '‡¥ò', '‡¥ô': '‡¥ö',
          '‡¥ö': '‡¥õ', '‡¥õ': '‡¥ú', '‡¥ú': '‡¥ù', '‡¥û': '‡¥ü', '‡¥ü': '‡¥†', '‡¥†': '‡¥°',
          '‡¥°': '‡¥¢', '‡¥£': '‡¥§', '‡¥§': '‡¥•', '‡¥•': '‡¥¶', '‡¥¶': '‡¥ß', '‡¥®': '‡¥™',
          '‡¥™': '‡¥´', '‡¥´': '‡¥¨', '‡¥¨': '‡¥≠', '‡¥Æ': '‡¥Ø', '‡¥Ø': '‡¥∞', '‡¥∞': '‡¥≤',
          '‡¥≤': '‡¥µ', '‡¥µ': '‡¥∂', '‡¥∂': '‡¥∑', '‡¥∑': '‡¥∏', '‡¥∏': '‡¥π', '‡¥π': '‡¥≥'
        };
        return text.split('').map(char => fancyMalayalam[char] || char).join('');
      }
    }
  }
};

const decorations = [
  { prefix: '‚òÖÂΩ° ', suffix: ' ÂΩ°‚òÖ', color: 'text-pink-500' },
  { prefix: '‚ãÜÔΩ°¬∞‚ú© ', suffix: ' ‚ú©¬∞ÔΩ°‚ãÜ', color: 'text-purple-500' },
  { prefix: 'ÍßÅ‡º∫ ', suffix: ' ‡ºªÍßÇ', color: 'text-blue-500' },
  { prefix: '‚Ä¢¬∞¬Ø`‚Ä¢‚Ä¢ ', suffix: ' ‚Ä¢‚Ä¢¬¥¬Ø¬∞‚Ä¢', color: 'text-green-500' },
  { prefix: '‚ó¶‚Ä¢‚óè‚ù§ ', suffix: ' ‚ù§‚óè‚Ä¢‚ó¶', color: 'text-red-500' },
  { prefix: '„Äé', suffix: '„Äè', color: 'text-yellow-500' },
  { prefix: '„Äê', suffix: '„Äë', color: 'text-indigo-500' },
  { prefix: '„Äñ', suffix: '„Äó', color: 'text-orange-500' },
  { prefix: '‚ä±', suffix: '‚ä∞', color: 'text-teal-500' },
  { prefix: '‚úø', suffix: '‚úø', color: 'text-rose-500' },
  { prefix: '‚ùÄ', suffix: '‚ùÄ', color: 'text-cyan-500' },
  { prefix: '‡º∫‚ô•‡ºª', suffix: '‡º∫‚ô•‡ºª', color: 'text-pink-600' },
  { prefix: '‚óà', suffix: '‚óà', color: 'text-purple-600' },
  { prefix: '‚ùÇ', suffix: '‚ùÇ', color: 'text-blue-600' },
  { prefix: '‚úæ', suffix: '‚úæ', color: 'text-emerald-500' }
];

function App() {
  const [text, setText] = useState('');
  const [selectedScript, setSelectedScript] = useState('latin');
  const [selectedDecoration, setSelectedDecoration] = useState(0);

  const copyToClipboard = useCallback(async (textToCopy: string) => {
    try {
      await navigator.clipboard.writeText(textToCopy);
    } catch (err) {
      console.error('Failed to copy text:', err);
    }
  }, []);

  const currentScript = scripts[selectedScript as keyof typeof scripts];
  const transformedText = Object.entries(currentScript.transformations).map(([key, fn]) => ({
    style: key,
    text: fn(text)
  }));

  const decoratedText = decorations[selectedDecoration].prefix + 
    text + 
    decorations[selectedDecoration].suffix;

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-100 to-pink-100">
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-center items-center mb-8">
          <h1 className="text-4xl font-bold flex items-center gap-2 text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600">
            <Sparkles className="w-8 h-8 text-purple-600" />
            Multilingual Text Generator
            <Globe2 className="w-8 h-8 text-pink-600" />
          </h1>
        </div>
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label
                htmlFor="script"
                className="block text-lg font-medium text-gray-700"
              >
                Select Script
              </label>
              <select
                id="script"
                value={selectedScript}
                onChange={(e) => setSelectedScript(e.target.value)}
                className="w-full p-4 rounded-lg border border-purple-200 focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white shadow-sm"
              >
                {Object.entries(scripts).map(([key, { name }]) => (
                  <option key={key} value={key}>
                    {name}
                  </option>
                ))}
              </select>
            </div>
            <div className="space-y-2">
              <label
                htmlFor="input"
                className="block text-lg font-medium text-gray-700"
              >
                Enter Text
              </label>
              <input
                id="input"
                type="text"
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="Type something..."
                className="w-full p-4 rounded-lg border border-purple-200 focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white shadow-sm"
              />
            </div>
          </div>
          <div className="space-y-2">
            <label className="block text-lg font-medium text-gray-700">
              Decorations
            </label>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              {decorations.map((decoration, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedDecoration(index)}
                  className={`p-3 rounded-lg text-center transition-all transform hover:scale-105 ${
                    selectedDecoration === index
                      ? `${decoration.color} bg-white shadow-lg`
                      : 'bg-white hover:shadow-md'
                  }`}
                >
                  {decoration.prefix}T{decoration.suffix}
                </button>
              ))}
            </div>
          </div>
          <div className="space-y-4">
            <h2 className="text-2xl font-semibold text-gray-800">
              Transformed Text
            </h2>
            <div className="grid gap-4">
              {transformedText.map(({ style, text: transformedStr }) => (
                <div
                  key={style}
                  className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow"
                >
                  <div>
                    <span className="text-sm font-medium text-gray-500">
                      {style.charAt(0).toUpperCase() + style.slice(1)}:
                    </span>
                    <p className="mt-1 text-lg text-gray-900">
                      {transformedStr || 'Type something...'}
                    </p>
                  </div>
                  <button
                    onClick={() => copyToClipboard(transformedStr)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <Copy className="w-5 h-5 text-gray-600" />
                  </button>
                </div>
              ))}
              <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
                <div>
                  <span className="text-sm font-medium text-gray-500">
                    Decorated:
                  </span>
                  <p className={`mt-1 text-lg ${decorations[selectedDecoration].color}`}>
                     {decoratedText || 'Type something...'}
                  </p>
                </div>
                <button
                  onClick={() => copyToClipboard(decoratedText)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <Copy className="w-5 h-5 text-gray-600" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="mt-12 border-t border-gray-700">
        <div className="container mx-auto px-4 py-8">
          {/* Developer Info */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* About */}
            <div className="text-center md:text-left">
              <h3 className="text-lg font-semibold text-white mb-3">About</h3>
              <p className="text-gray-400">
                TimeSync is a modern time synchronization tool built with precision and elegance.
                Accurate time synchronized with atomic clock time servers.
              </p>
            </div>
            {/* Contact */}
            <div className="text-center">
              <h3 className="text-lg font-semibold text-white mb-3">Contact</h3>
              <div className="flex items-center justify-center space-x-2 text-gray-400">
                <Mail className="w-4 h-4" />
                <a href="mailto:ajmalj2003@gmail.com" className="hover:text-blue-400 transition-colors">
                  ajmalj2003@gmail.com
                </a>
              </div>
              <div className="flex items-center justify-center space-x-2 text-gray-400 mt-2">
                <Globe className="w-4 h-4" />
                <a href="https://your-website.com" target="_blank" rel="noopener noreferrer" className="hover:text-blue-400 transition-colors">
                  coming soon
                </a>
              </div>
            </div>
            {/* Social Links */}
            <div className="text-center md:text-right">
              <h3 className="text-lg font-semibold text-white mb-3">Connect</h3>
              <div className="flex justify-center md:justify-end space-x-4">
                <a
                  href="https://github.com/ajmalj05"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-gray-400 hover:text-blue-400 transition-colors"
                  aria-label="GitHub"
                >
                  <Github className="w-6 h-6" />
                </a>
                <a
                  href="https://linkedin.com/in/yourusername"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-gray-400 hover:text-blue-400 transition-colors"
                  aria-label="LinkedIn"
                >
                  <Linkedin className="w-6 h-6" />
                </a>
                <a
                  href="https://twitter.com/yourusername"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-gray-400 hover:text-blue-400 transition-colors"
                  aria-label="Twitter"
                >
                  <Twitter className="w-6 h-6" />
                </a>
              </div>
            </div>
          </div>
          {/* Copyright */}
          <div className="text-center mt-8 pt-6 border-t border-gray-700">
            <p className="text-sm text-gray-400">
              ¬© {new Date().getFullYear()} TimeGenie. Built with ‚ù§Ô∏è by Ajmal J
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;